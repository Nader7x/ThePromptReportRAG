name: 🐳 Build and Publish Docker Images

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_RAW: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: 🐳 Build & Push Docker Images
    permissions:
      contents: read
      packages: write
    outputs:
      image-name: ${{ steps.image-name.outputs.IMAGE_NAME }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Set lowercase image name
        id: image-name
        run: |
          IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME_RAW }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=${IMAGE_NAME_LOWER}" >> $GITHUB_OUTPUT
          echo "Using image name: ${IMAGE_NAME_LOWER}"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push main Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push Production image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.image-name.outputs.IMAGE_NAME }}:production
            ${{ env.REGISTRY }}/${{ steps.image-name.outputs.IMAGE_NAME }}:production-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📋 Generate image report
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🐳 Docker Image Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Tag | Registry |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-----|----------|" >> $GITHUB_STEP_SUMMARY

          # Parse tags from metadata output and handle multiline properly
          echo '${{ steps.meta.outputs.tags }}' | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              image_name=$(basename "$tag")
              tag_version=$(echo "$tag" | cut -d':' -f2)
              echo "| \`$image_name\` | \`$tag_version\` | \`${{ env.REGISTRY }}\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the latest image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ steps.image-name.outputs.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8000:8000 -p 8501:8501 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e GEMINI_API_KEY=your_api_key \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ steps.image-name.outputs.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  test-image:
    runs-on: ubuntu-latest
    name: 🧪 Test Docker Image
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: 🧪 Test Docker image functionality
        env:
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ needs.build-and-push.outputs.image-name }}:latest
        run: |
          echo "🧪 Testing Docker image: $IMAGE_TAG"

          # Validate IMAGE_TAG is set
          if [[ -z "$IMAGE_TAG" ]]; then
            echo "❌ IMAGE_TAG environment variable is not set"
            exit 1
          fi

          # Pull the image
          echo "� Pulling image..."
          docker pull "$IMAGE_TAG"

          # Verify image exists
          if ! docker images | grep -q "$(echo $IMAGE_TAG | cut -d'/' -f2- | cut -d':' -f1)"; then
            echo "❌ Image not found after pull"
            docker images
            exit 1
          fi

          echo "✅ Image verified: $IMAGE_TAG"

          # Cleanup any existing test containers
          docker stop test-container 2>/dev/null || true
          docker rm test-container 2>/dev/null || true

          # Start container with health monitoring
          echo "🚀 Starting container..."
          CONTAINER_ID=$(docker run -d --name test-container \
            -e GEMINI_API_KEY="test-key-placeholder" \
            -p 8000:8000 \
            "$IMAGE_TAG")

          if [[ -z "$CONTAINER_ID" ]]; then
            echo "❌ Failed to start container"
            exit 1
          fi

          echo "📝 Container started: $CONTAINER_ID"

          # Wait for application startup
          echo "⏳ Waiting for application startup..."
          for i in {1..6}; do
            sleep 10
            
            # Check container status
            if ! docker ps | grep -q test-container; then
              echo "❌ Container stopped unexpectedly at check $i"
              echo "📋 Container logs:"
              docker logs test-container 2>&1
              echo "📋 Container exit code:"
              docker inspect test-container --format='{{.State.ExitCode}}' 2>/dev/null
              exit 1
            fi
            
            echo "✅ Container check $i/6 passed"
          done

          # Perform health check
          echo "🔍 Performing health check..."
          for attempt in {1..10}; do
            if curl -f -s --max-time 10 "http://localhost:8000/api/health"; then
              echo "✅ Health check passed on attempt $attempt"
              break
            elif [[ $attempt -eq 10 ]]; then
              echo "❌ Health check failed after 10 attempts"
              echo "📋 Final container logs:"
              docker logs test-container 2>&1
              echo "📋 Network diagnostic:"
              curl -v --max-time 5 "http://localhost:8000/api/health" 2>&1 || true
              docker stop test-container || true
              exit 1
            else
              echo "⏳ Health check attempt $attempt/10 failed, retrying..."
              sleep 3
            fi
          done

          # Test API endpoints
          echo "🔍 Testing API endpoints..."
          if curl -f -s --max-time 10 "http://localhost:8000/api/docs" > /dev/null; then
            echo "✅ API docs endpoint accessible"
          else
            echo "⚠️ API docs endpoint not accessible"
          fi

          # Cleanup
          echo "🧹 Cleaning up..."
          docker stop test-container || true
          docker rm test-container || true
          echo "✅ Docker image testing completed successfully"

  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
      - name: � Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ needs.build-and-push.outputs.image-name }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
