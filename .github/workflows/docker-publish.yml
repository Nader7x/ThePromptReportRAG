name: 🐳 Build and Publish Docker Images

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: 🐳 Build & Push Docker Images
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push Production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Test the built image
          echo "🧪 Testing Docker image..."

          # Get the latest built image
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

          # Run container in background
          docker run --rm -d --name test-container \
            -e GEMINI_API_KEY="test-key-placeholder" \
            -p 8000:8000 \
            $IMAGE_TAG

          # Wait for container to start
          echo "⏳ Waiting for container to start..."
          sleep 20

          # Check if container is running
          if ! docker ps | grep test-container; then
            echo "❌ Container failed to start"
            docker logs test-container || true
            exit 1
          fi

          # Basic health check with timeout
          echo "🔍 Performing health check..."
          for i in {1..10}; do
            if curl -f http://localhost:8000/api/health 2>/dev/null; then
              echo "✅ Health check passed"
              break
            elif [ $i -eq 10 ]; then
              echo "❌ Health check failed after 10 attempts"
              docker logs test-container
              docker stop test-container || true
              exit 1
            else
              echo "⏳ Attempt $i/10 failed, retrying..."
              sleep 3
            fi
          done

          # Cleanup
          docker stop test-container || true
          echo "✅ Docker image test completed successfully"

      - name: 📋 Generate image report
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🐳 Docker Image Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Tag | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-----|------|" >> $GITHUB_STEP_SUMMARY

          for tag in ${{ steps.meta.outputs.tags }}; do
            size=$(docker images --format "table {{.Size}}" $tag | tail -n +2 | head -1)
            echo "| \`$tag\` | \`$(echo $tag | cut -d':' -f2)\` | $size |" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8000:8000 -p 8501:8501 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e GEMINI_API_KEY=your_api_key \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
