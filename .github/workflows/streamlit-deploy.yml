name: 🚀 Deploy to Streamlit Cloud

on:
  push:
    branches: [main]
    paths:
      - "streamlit_app.py"
      - "requirements.txt"
      - "*.py"
      - ".streamlit/**"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.11"
  STREAMLIT_APP_URL: "https://prompt-forge-ai.streamlit.app"

jobs:
  validate-streamlit:
    runs-on: ubuntu-latest
    name: ✅ Validate Streamlit App

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Validate Streamlit app
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          API_BASE_URL: "http://localhost:8000"
        run: |
          # Check if streamlit app can be imported without errors
          echo "🔍 Validating Streamlit app structure..."

          python -c "
          import sys
          import os
          sys.path.append('.')

          try:
              # Test basic imports
              import streamlit as st
              import requests
              import json
              import pandas as pd
              import plotly.express as px
              print('✅ Core dependencies imported successfully')
              
              # Check if main app file exists and is valid Python
              with open('streamlit_app.py', 'r') as f:
                  content = f.read()
                  
              # Basic syntax check
              compile(content, 'streamlit_app.py', 'exec')
              print('✅ streamlit_app.py syntax is valid')
              
              # Check for required Streamlit components
              if 'st.set_page_config' in content:
                  print('✅ Page configuration found')
              else:
                  print('⚠️ Warning: No page configuration found')
                  
          except Exception as e:
              print(f'❌ Error validating app: {e}')
              sys.exit(1)
          "

      - name: 🧪 Test app startup
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          API_BASE_URL: "http://localhost:8000"
        run: |
          echo "🧪 Testing Streamlit app startup..."

          # Start streamlit in headless mode for testing
          streamlit run streamlit_app.py \
            --server.headless=true \
            --server.port=8501 \
            --server.enableCORS=false \
            --server.enableXsrfProtection=false &

          STREAMLIT_PID=$!
          echo "📝 Streamlit started with PID: $STREAMLIT_PID"

          # Wait for startup
          sleep 15

          # Check if process is still running
          if ! kill -0 $STREAMLIT_PID 2>/dev/null; then
            echo "❌ Streamlit process died during startup"
            exit 1
          fi

          # Check if streamlit is responding
          for i in {1..10}; do
            if curl -f http://localhost:8501/_stcore/health 2>/dev/null; then
              echo "✅ Streamlit health check passed"
              break
            elif [ $i -eq 10 ]; then
              echo "❌ Streamlit health check failed after 10 attempts"
              exit 1
            else
              echo "⏳ Health check attempt $i/10 failed, retrying..."
              sleep 3
            fi
          done

          # Cleanup
          kill $STREAMLIT_PID 2>/dev/null || true
          echo "✅ Streamlit startup test completed"

  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Streamlit Cloud
    needs: validate-streamlit
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Prepare deployment
        run: |
          echo "🚀 Preparing Streamlit Community Cloud deployment..."

          # Check if required files exist
          if [ ! -f "streamlit_app.py" ]; then
            echo "❌ streamlit_app.py not found!"
            exit 1
          fi

          if [ ! -f "requirements.txt" ]; then
            echo "❌ requirements.txt not found!"
            exit 1
          fi

          echo "✅ Required files found"
          echo "📋 Files for deployment:"
          ls -la *.py requirements*.txt

      - name: 📝 Update deployment status
        run: |
          cat > deployment_status.md << EOF
          # 🚀 Streamlit Deployment Status

          **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}

          ## Deployment Information

          ### 🌐 Live App
          - **URL:** [${{ env.STREAMLIT_APP_URL }}](${{ env.STREAMLIT_APP_URL }})
          - **Status:** Deployed ✅

          ### 📋 Configuration
          - **Main File:** streamlit_app.py
          - **Python Version:** ${{ env.PYTHON_VERSION }}
          - **Dependencies:** requirements.txt

          ### 🔧 Setup Instructions for Streamlit Cloud

          1. Go to [share.streamlit.io](https://share.streamlit.io/)
          2. Connect your GitHub account
          3. Select this repository: \`${{ github.repository }}\`
          4. Set main file: \`streamlit_app.py\`
          5. Add secrets in Streamlit Cloud dashboard:
             - \`GEMINI_API_KEY\`: Your Google Gemini API key
             - \`API_BASE_URL\`: Your API endpoint (if using external API)

          ### 🔐 Required Secrets
          Make sure to add these secrets in your Streamlit Cloud app settings:

          \`\`\`toml
          # .streamlit/secrets.toml
          GEMINI_API_KEY = "your_gemini_api_key_here"
          API_BASE_URL = "your_api_base_url_here"
          \`\`\`

          ### 📦 Latest Deployment
          - **Commit Hash:** ${{ github.sha }}
          - **Commit Message:** ${{ github.event.head_commit.message }}
          - **Author:** ${{ github.actor }}
          EOF

      - name: � Pull latest changes before deployment status update
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git pull origin main --rebase --autostash

      - name: �💾 Commit deployment status
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🚀 Update deployment status [skip ci]"
          file_pattern: deployment_status.md

      - name: 📨 Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'streamlit-cloud',
              description: 'Deploy to Streamlit Community Cloud',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: process.env.STREAMLIT_APP_URL || 'https://prompt-forge-ai.streamlit.app',
              description: 'Successfully deployed to Streamlit Cloud'
            });
