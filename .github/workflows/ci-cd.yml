name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_streamlit:
        description: 'Deploy to Streamlit Community Cloud'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Suite
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🔍 Code quality checks
      run: |
        # Run flake8 for linting
        flake8 --max-line-length=100 --ignore=E203,W503 *.py
        
        # Run black for code formatting check
        black --check --diff *.py
        
    - name: 🧪 Run tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        # Run pytest with coverage
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔒 Run security checks
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
        # Check for known security vulnerabilities
        safety check --json || true
        
        # Run bandit security linter
        bandit -r . -f json || true

  build:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Images
    needs: [test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: enhanced-rag:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🧪 Test Docker container
      run: |
        # Build and test the container
        docker build -t enhanced-rag:test .
        
        # Basic smoke test - check if container starts
        docker run --rm -d --name test-container \
          -e GEMINI_API_KEY="test-key" \
          -p 8000:8000 \
          enhanced-rag:test &
        
        # Wait for container to start
        sleep 10
        
        # Stop the test container
        docker stop test-container || true

  deploy-streamlit:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Streamlit Cloud
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_to_streamlit == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Trigger Streamlit Cloud deployment
      run: |
        echo "🚀 Streamlit Community Cloud will automatically deploy from main branch"
        echo "📝 Make sure your app is configured at https://share.streamlit.io/"
        echo "✅ Deployment triggered by push to main branch"
        
    - name: 📧 Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          🚀 Streamlit deployment ${{ job.status }}
          📱 App URL: https://your-app-name.streamlit.app
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  release:
    runs-on: ubuntu-latest
    name: 📦 Create Release
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Generate tag
      id: tag
      run: |
        # Generate semantic version tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version number and increment patch
        VERSION=$(echo $LATEST_TAG | sed 's/^v//')
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=$((${VERSION_PARTS[2]} + 1))
        
        NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
        echo "New tag: $NEW_TAG"
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
        
    - name: 📦 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        body: |
          🚀 **Enhanced RAG Application Release**
          
          ### What's New
          - Automated build and deployment
          - Enhanced testing coverage
          - Security improvements
          
          ### Deployment
          - 🌐 Streamlit App: [Live Demo](https://your-app-name.streamlit.app)
          - 📚 API Docs: Available via FastAPI
          - 🐳 Docker: `docker pull ghcr.io/your-username/enhanced-rag:${{ steps.tag.outputs.tag }}`
          
          ### Installation
          ```bash
          git clone https://github.com/your-username/enhanced-rag.git
          cd enhanced-rag
          pip install -r requirements.txt
          ```
        draft: false
        prerelease: false
